"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/cookies-next";
exports.ids = ["vendor-chunks/cookies-next"];
exports.modules = {

/***/ "(ssr)/./node_modules/cookies-next/lib/index.js":
/*!************************************************!*\
  !*** ./node_modules/cookies-next/lib/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __assign = (void 0) && (void 0).__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (void 0) && (void 0).__rest || function(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.hasCookie = exports.deleteCookie = exports.setCookie = exports.getCookie = exports.getCookies = void 0;\nvar cookie_1 = __webpack_require__(/*! cookie */ \"(ssr)/./node_modules/cookie/index.js\");\nvar isClientSide = function() {\n    return \"undefined\" !== \"undefined\";\n};\nvar isCookiesFromAppRouter = function(cookieStore) {\n    if (!cookieStore) return false;\n    return \"getAll\" in cookieStore && \"set\" in cookieStore && typeof cookieStore.getAll === \"function\" && typeof cookieStore.set === \"function\";\n};\nvar isContextFromAppRouter = function(context) {\n    return !!(context === null || context === void 0 ? void 0 : context.req) && \"cookies\" in context.req && isCookiesFromAppRouter(context === null || context === void 0 ? void 0 : context.req.cookies) || !!(context === null || context === void 0 ? void 0 : context.res) && \"cookies\" in context.res && isCookiesFromAppRouter(context === null || context === void 0 ? void 0 : context.res.cookies) || !!(context === null || context === void 0 ? void 0 : context.cookies) && isCookiesFromAppRouter(context.cookies());\n};\nvar transformAppRouterCookies = function(cookies) {\n    var _cookies = {};\n    cookies.getAll().forEach(function(_a) {\n        var name = _a.name, value = _a.value;\n        _cookies[name] = value;\n    });\n    return _cookies;\n};\nvar stringify = function(value) {\n    if (value === void 0) {\n        value = \"\";\n    }\n    try {\n        var result = JSON.stringify(value);\n        return /^[\\{\\[]/.test(result) ? result : value;\n    } catch (e) {\n        return value;\n    }\n};\nvar decode = function(str) {\n    if (!str) return str;\n    return str.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);\n};\nvar getCookies = function(options) {\n    if (isContextFromAppRouter(options)) {\n        if (options === null || options === void 0 ? void 0 : options.req) {\n            return transformAppRouterCookies(options.req.cookies);\n        }\n        if (options === null || options === void 0 ? void 0 : options.cookies) {\n            return transformAppRouterCookies(options.cookies());\n        }\n    }\n    var req;\n    // DefaultOptions['req] can be casted here because is narrowed by using the fn: isContextFromAppRouter\n    if (options) req = options.req;\n    if (!isClientSide()) {\n        // if cookie-parser is used in project get cookies from ctx.req.cookies\n        // if cookie-parser isn't used in project get cookies from ctx.req.headers.cookie\n        if (req && req.cookies) return req.cookies;\n        if (req && req.headers.cookie) return (0, cookie_1.parse)(req.headers.cookie);\n        return {};\n    }\n    var _cookies = {};\n    var documentCookies = document.cookie ? document.cookie.split(\"; \") : [];\n    for(var i = 0, len = documentCookies.length; i < len; i++){\n        var cookieParts = documentCookies[i].split(\"=\");\n        var _cookie = cookieParts.slice(1).join(\"=\");\n        var name_1 = cookieParts[0];\n        _cookies[name_1] = _cookie;\n    }\n    return _cookies;\n};\nexports.getCookies = getCookies;\nvar getCookie = function(key, options) {\n    var _cookies = (0, exports.getCookies)(options);\n    var value = _cookies[key];\n    if (value === undefined) return undefined;\n    return decode(value);\n};\nexports.getCookie = getCookie;\nvar setCookie = function(key, data, options) {\n    if (isContextFromAppRouter(options)) {\n        var req = options.req, res = options.res, cookiesFn = options.cookies, restOptions = __rest(options, [\n            \"req\",\n            \"res\",\n            \"cookies\"\n        ]);\n        var payload = __assign({\n            name: key,\n            value: data\n        }, restOptions);\n        if (req) {\n            req.cookies.set(payload);\n        }\n        if (res) {\n            res.cookies.set(payload);\n        }\n        if (cookiesFn) {\n            cookiesFn().set(payload);\n        }\n        return;\n    }\n    var _cookieOptions;\n    var _req;\n    var _res;\n    if (options) {\n        // DefaultOptions can be casted here because the AppRouterMiddlewareOptions is narrowed using the fn: isContextFromAppRouter\n        var _a = options, req = _a.req, res = _a.res, _options = __rest(_a, [\n            \"req\",\n            \"res\"\n        ]);\n        _req = req;\n        _res = res;\n        _cookieOptions = _options;\n    }\n    var cookieStr = (0, cookie_1.serialize)(key, stringify(data), __assign({\n        path: \"/\"\n    }, _cookieOptions));\n    if (!isClientSide()) {\n        if (_res && _req) {\n            var currentCookies = _res.getHeader(\"Set-Cookie\");\n            if (!Array.isArray(currentCookies)) {\n                currentCookies = !currentCookies ? [] : [\n                    String(currentCookies)\n                ];\n            }\n            _res.setHeader(\"Set-Cookie\", currentCookies.concat(cookieStr));\n            if (_req && _req.cookies) {\n                var _cookies = _req.cookies;\n                data === \"\" ? delete _cookies[key] : _cookies[key] = stringify(data);\n            }\n            if (_req && _req.headers && _req.headers.cookie) {\n                var _cookies = (0, cookie_1.parse)(_req.headers.cookie);\n                data === \"\" ? delete _cookies[key] : _cookies[key] = stringify(data);\n                _req.headers.cookie = Object.entries(_cookies).reduce(function(accum, item) {\n                    return accum.concat(\"\".concat(item[0], \"=\").concat(item[1], \";\"));\n                }, \"\");\n            }\n        }\n    } else {\n        document.cookie = cookieStr;\n    }\n};\nexports.setCookie = setCookie;\nvar deleteCookie = function(key, options) {\n    return (0, exports.setCookie)(key, \"\", __assign(__assign({}, options), {\n        maxAge: -1\n    }));\n};\nexports.deleteCookie = deleteCookie;\nvar hasCookie = function(key, options) {\n    if (!key) return false;\n    var cookie = (0, exports.getCookies)(options);\n    return cookie.hasOwnProperty(key);\n};\nexports.hasCookie = hasCookie;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cookies-next/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/cookies-next/lib/index.js":
/*!************************************************!*\
  !*** ./node_modules/cookies-next/lib/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __assign = (void 0) && (void 0).__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (void 0) && (void 0).__rest || function(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.hasCookie = exports.deleteCookie = exports.setCookie = exports.getCookie = exports.getCookies = void 0;\nvar cookie_1 = __webpack_require__(/*! cookie */ \"(rsc)/./node_modules/cookie/index.js\");\nvar isClientSide = function() {\n    return \"undefined\" !== \"undefined\";\n};\nvar isCookiesFromAppRouter = function(cookieStore) {\n    if (!cookieStore) return false;\n    return \"getAll\" in cookieStore && \"set\" in cookieStore && typeof cookieStore.getAll === \"function\" && typeof cookieStore.set === \"function\";\n};\nvar isContextFromAppRouter = function(context) {\n    return !!(context === null || context === void 0 ? void 0 : context.req) && \"cookies\" in context.req && isCookiesFromAppRouter(context === null || context === void 0 ? void 0 : context.req.cookies) || !!(context === null || context === void 0 ? void 0 : context.res) && \"cookies\" in context.res && isCookiesFromAppRouter(context === null || context === void 0 ? void 0 : context.res.cookies) || !!(context === null || context === void 0 ? void 0 : context.cookies) && isCookiesFromAppRouter(context.cookies());\n};\nvar transformAppRouterCookies = function(cookies) {\n    var _cookies = {};\n    cookies.getAll().forEach(function(_a) {\n        var name = _a.name, value = _a.value;\n        _cookies[name] = value;\n    });\n    return _cookies;\n};\nvar stringify = function(value) {\n    if (value === void 0) {\n        value = \"\";\n    }\n    try {\n        var result = JSON.stringify(value);\n        return /^[\\{\\[]/.test(result) ? result : value;\n    } catch (e) {\n        return value;\n    }\n};\nvar decode = function(str) {\n    if (!str) return str;\n    return str.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);\n};\nvar getCookies = function(options) {\n    if (isContextFromAppRouter(options)) {\n        if (options === null || options === void 0 ? void 0 : options.req) {\n            return transformAppRouterCookies(options.req.cookies);\n        }\n        if (options === null || options === void 0 ? void 0 : options.cookies) {\n            return transformAppRouterCookies(options.cookies());\n        }\n    }\n    var req;\n    // DefaultOptions['req] can be casted here because is narrowed by using the fn: isContextFromAppRouter\n    if (options) req = options.req;\n    if (!isClientSide()) {\n        // if cookie-parser is used in project get cookies from ctx.req.cookies\n        // if cookie-parser isn't used in project get cookies from ctx.req.headers.cookie\n        if (req && req.cookies) return req.cookies;\n        if (req && req.headers.cookie) return (0, cookie_1.parse)(req.headers.cookie);\n        return {};\n    }\n    var _cookies = {};\n    var documentCookies = document.cookie ? document.cookie.split(\"; \") : [];\n    for(var i = 0, len = documentCookies.length; i < len; i++){\n        var cookieParts = documentCookies[i].split(\"=\");\n        var _cookie = cookieParts.slice(1).join(\"=\");\n        var name_1 = cookieParts[0];\n        _cookies[name_1] = _cookie;\n    }\n    return _cookies;\n};\nexports.getCookies = getCookies;\nvar getCookie = function(key, options) {\n    var _cookies = (0, exports.getCookies)(options);\n    var value = _cookies[key];\n    if (value === undefined) return undefined;\n    return decode(value);\n};\nexports.getCookie = getCookie;\nvar setCookie = function(key, data, options) {\n    if (isContextFromAppRouter(options)) {\n        var req = options.req, res = options.res, cookiesFn = options.cookies, restOptions = __rest(options, [\n            \"req\",\n            \"res\",\n            \"cookies\"\n        ]);\n        var payload = __assign({\n            name: key,\n            value: data\n        }, restOptions);\n        if (req) {\n            req.cookies.set(payload);\n        }\n        if (res) {\n            res.cookies.set(payload);\n        }\n        if (cookiesFn) {\n            cookiesFn().set(payload);\n        }\n        return;\n    }\n    var _cookieOptions;\n    var _req;\n    var _res;\n    if (options) {\n        // DefaultOptions can be casted here because the AppRouterMiddlewareOptions is narrowed using the fn: isContextFromAppRouter\n        var _a = options, req = _a.req, res = _a.res, _options = __rest(_a, [\n            \"req\",\n            \"res\"\n        ]);\n        _req = req;\n        _res = res;\n        _cookieOptions = _options;\n    }\n    var cookieStr = (0, cookie_1.serialize)(key, stringify(data), __assign({\n        path: \"/\"\n    }, _cookieOptions));\n    if (!isClientSide()) {\n        if (_res && _req) {\n            var currentCookies = _res.getHeader(\"Set-Cookie\");\n            if (!Array.isArray(currentCookies)) {\n                currentCookies = !currentCookies ? [] : [\n                    String(currentCookies)\n                ];\n            }\n            _res.setHeader(\"Set-Cookie\", currentCookies.concat(cookieStr));\n            if (_req && _req.cookies) {\n                var _cookies = _req.cookies;\n                data === \"\" ? delete _cookies[key] : _cookies[key] = stringify(data);\n            }\n            if (_req && _req.headers && _req.headers.cookie) {\n                var _cookies = (0, cookie_1.parse)(_req.headers.cookie);\n                data === \"\" ? delete _cookies[key] : _cookies[key] = stringify(data);\n                _req.headers.cookie = Object.entries(_cookies).reduce(function(accum, item) {\n                    return accum.concat(\"\".concat(item[0], \"=\").concat(item[1], \";\"));\n                }, \"\");\n            }\n        }\n    } else {\n        document.cookie = cookieStr;\n    }\n};\nexports.setCookie = setCookie;\nvar deleteCookie = function(key, options) {\n    return (0, exports.setCookie)(key, \"\", __assign(__assign({}, options), {\n        maxAge: -1\n    }));\n};\nexports.deleteCookie = deleteCookie;\nvar hasCookie = function(key, options) {\n    if (!key) return false;\n    var cookie = (0, exports.getCookies)(options);\n    return cookie.hasOwnProperty(key);\n};\nexports.hasCookie = hasCookie;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/cookies-next/lib/index.js\n");

/***/ })

};
;